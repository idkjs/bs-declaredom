/* Use this instead of Css_Style.t for tree-shaking */
type style('a) = Js.Dict.t(Css_Property.t('a));

module Internal = {
  external make: Dom.node => Html_Node.t(_) = "%identity";
};

module A = {
  type t(+'a) = Html_Node.t([> Html_Node.a] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.interactive
        | Html_Node.palpable('a)
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~href: string=?,
        ~target: string=?,
        ~download: string=?,
        ~rel: string=?,
        ~rev: string=?,
        ~hreflang: string=?,
        ~_type: string=?,
        ~referrerpolicy: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~href=?,
          ~target=?,
          ~download=?,
          ~rel=?,
          ~rev=?,
          ~hreflang=?,
          ~_type=?,
          ~referrerpolicy=?,
          (),
        ) =>
      _make(
        ~href?,
        ~target=?Belt.Option.map(target, Html_Attributes.Target.show),
        ~download=?Belt.Option.map(download, Util.string_of_unit),
        ~rel=?Belt.Option.map(rel, Html_Attributes.LinkType.Hyperlink.show),
        ~rev=?Belt.Option.map(rev, Html_Attributes.LinkType.Hyperlink.show),
        ~hreflang?,
        ~_type?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.link
                 | Html_Attributes.Aria.button
                 | Html_Attributes.Aria.checkbox
                 | Html_Attributes.Aria.radio
                 | Html_Attributes.Aria.switch_
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.treeitem
               ],
             ),
           )=?,
        ~href=?,
        ~target=?,
        ~download=?,
        ~rel=?,
        ~rev=?,
        ~hreflang=?,
        ~_type=?,
        ~referrerpolicy=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "a",
      Util.merge_all([|
        Attributes.make(
          ~href?,
          ~target?,
          ~download?,
          ~rel?,
          ~rev?,
          ~hreflang?,
          ~_type?,
          ~referrerpolicy?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Abbr = {
  type t(+'a) = Html_Node.t([> Html_Node.abbr] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "abbr",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Address = {
  type t(+'a) = Html_Node.t([> Html_Node.address] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.group))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "address",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Area = {
  type t(+'a) = Html_Node.t([> Html_Node.area] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type shape = [ | `rect | `circle | `poly];

    let from_coords = value =>
      value->(Belt.List.map(string_of_int))->(Util.join_with(","));

    [@bs.obj]
    external _make:
      (
        ~alt: string=?,
        ~coords: string=?,
        ~download: string=?,
        ~href: string=?,
        ~hreflang: string=?,
        ~rel: string=?,
        ~shape: string=?,
        ~target: string=?,
        ~_type: string=?,
        ~referrerpolicy: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~alt=?,
          ~coords=?,
          ~download=?,
          ~href=?,
          ~hreflang=?,
          ~rel=?,
          ~shape=?,
          ~target=?,
          ~_type=?,
          ~referrerpolicy=?,
          (),
        ) =>
      _make(
        ~alt?,
        ~coords=?Belt.Option.map(coords, from_coords),
        ~download=?Belt.Option.map(download, Util.string_of_unit),
        ~href?,
        ~hreflang?,
        ~rel=?Belt.Option.map(rel, Html_Attributes.LinkType.Hyperlink.show),
        ~shape=?Belt.Option.map(shape, shapeToJs),
        ~target=?Belt.Option.map(target, Html_Attributes.Target.show),
        ~_type?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        (),
      );
  };

  let make =
      (
        ~alt=?,
        ~coords=?,
        ~download=?,
        ~href=?,
        ~hreflang=?,
        ~rel=?,
        ~shape=?,
        ~target=?,
        ~_type=?,
        ~referrerpolicy=?,
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.link))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "area",
      Util.merge_all([|
        Attributes.make(
          ~alt?,
          ~coords?,
          ~download?,
          ~href?,
          ~hreflang?,
          ~rel?,
          ~shape?,
          ~target?,
          ~_type?,
          ~referrerpolicy?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Article = {
  type t(+'a) = Html_Node.t([> Html_Node.article] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.article
                 | Html_Attributes.Aria.application
                 | Html_Attributes.Aria.document
                 | Html_Attributes.Aria.feed
                 | Html_Attributes.Aria.main
                 | Html_Attributes.Aria.region
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "article",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Aside = {
  type t(+'a) = Html_Node.t([> Html_Node.aside] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.complementary
                 | Html_Attributes.Aria.feed
                 | Html_Attributes.Aria.note
                 | Html_Attributes.Aria.search
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "aside",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Audio = {
  type t(+'a) = Html_Node.t([> Html_Node.audio] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.source
        | Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.interactive
        | Html_Node.embedded
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~src: string=?,
        ~crossorigin: string=?,
        ~preload: string=?,
        ~autoplay: string=?,
        ~loop: string=?,
        ~muted: string=?,
        ~controls: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~src=?,
          ~crossorigin=?,
          ~preload=?,
          ~autoplay=?,
          ~loop=?,
          ~muted=?,
          ~controls=?,
          (),
        ) =>
      _make(
        ~src?,
        ~crossorigin=?
          Belt.Option.map(crossorigin, Html_Attributes.CrossOrigin.show),
        ~preload=?Belt.Option.map(preload, Html_Attributes.Preload.show),
        ~autoplay=?Belt.Option.map(autoplay, Util.string_of_unit),
        ~loop=?Belt.Option.map(loop, Util.string_of_unit),
        ~muted=?Belt.Option.map(muted, Util.string_of_unit),
        ~controls=?Belt.Option.map(controls, Util.string_of_unit),
        (),
      );
  };

  let make =
      (
        ~src=?,
        ~crossorigin=?,
        ~preload=?,
        ~autoplay=?,
        ~loop=?,
        ~muted=?,
        ~controls=?,
        ~aria:
           option(Html_Attributes.Aria.t(Html_Attributes.Aria.application))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_load=?,
        ~on_loadend=?,
        ~on_securitypolicyviolation=?,
        ~on_abort=?,
        ~on_canplay=?,
        ~on_canplaythrough=?,
        ~on_cuechange=?,
        ~on_durationchange=?,
        ~on_emptied=?,
        ~on_ended=?,
        ~on_error=?,
        ~on_loadedmetadata=?,
        ~on_loadeddata=?,
        ~on_loadstart=?,
        ~on_pause=?,
        ~on_play=?,
        ~on_playing=?,
        ~on_progress=?,
        ~on_ratechange=?,
        ~on_resize=?,
        ~on_seeked=?,
        ~on_seeking=?,
        ~on_suspend=?,
        ~on_stalled=?,
        ~on_timeupdate=?,
        ~on_volumechange=?,
        ~on_waiting=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child(_)),
      )
      : t(_) =>
    Declaredom.make(
      "audio",
      Util.merge_all([|
        Attributes.make(
          ~src?,
          ~crossorigin?,
          ~preload?,
          ~autoplay?,
          ~loop?,
          ~muted?,
          ~controls?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Resource.make(
          ~on_load?,
          ~on_loadend?,
          ~on_securitypolicyviolation?,
          (),
        ),
        Html_Events.Media.make(
          ~on_abort?,
          ~on_canplay?,
          ~on_canplaythrough?,
          ~on_cuechange?,
          ~on_durationchange?,
          ~on_emptied?,
          ~on_ended?,
          ~on_error?,
          ~on_loadedmetadata?,
          ~on_loadeddata?,
          ~on_loadstart?,
          ~on_pause?,
          ~on_play?,
          ~on_playing?,
          ~on_progress?,
          ~on_ratechange?,
          ~on_resize?,
          ~on_seeked?,
          ~on_seeking?,
          ~on_suspend?,
          ~on_stalled?,
          ~on_timeupdate?,
          ~on_volumechange?,
          ~on_waiting?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module B = {
  type t(+'a) = Html_Node.t([> Html_Node.b] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "b",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Base = {
  type t(+'a) = Html_Node.t([> Html_Node.base] as 'a);

  module Attributes = {
    [@bs.obj]
    external _make:
      (~href: string=?, ~target: string=?, unit) => Html_Attributes.t;

    let make = (~href=?, ~target=?, ()) =>
      _make(
        ~href?,
        ~target=?Belt.Option.map(target, Html_Attributes.Target.show),
        (),
      );
  };

  let make =
      (
        ~href=?,
        ~target=?,
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "base",
      Util.merge_all([|
        Attributes.make(~href?, ~target?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Bdi = {
  type t(+'a) = Html_Node.t([> Html_Node.bdi] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "bdi",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Bdo = {
  type t(+'a) = Html_Node.t([> Html_Node.bdo] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "bdo",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Blockquote = {
  type t(+'a) = Html_Node.t([> Html_Node.blockquote] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external make: (~cite: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~cite=?,
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "blockquote",
      Util.merge_all([|
        Attributes.make(~cite?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Body = {
  type t(+'a) = Html_Node.t([> Html_Node.body] as 'a);

  type children(+'a) = [ Html_Node.flow('a) | Html_Node.other];
  type child(+'a) = Html_Node.t(children('a));

  module Attributes = {
    [@bs.obj]
    external make:
      (
        ~on_afterprint: Dom.event => unit=?,
        ~on_beforeprint: Dom.event => unit=?,
        ~on_beforeunload: Dom.event => unit=?,
        ~on_hashchange: Dom.event => unit=?,
        ~on_languagechange: Dom.event => unit=?,
        ~on_message: Dom.event => unit=?,
        ~on_messageerror: Dom.event => unit=?,
        ~on_offline: Dom.event => unit=?,
        ~on_online: Dom.event => unit=?,
        ~on_pagehide: Dom.event => unit=?,
        ~on_pageshow: Dom.event => unit=?,
        ~on_popstate: Dom.event => unit=?,
        ~on_resize: Dom.event => unit=?,
        ~on_rejectionhandled: Dom.event => unit=?,
        ~on_storage: Dom.event => unit=?,
        ~on_unhandledrejection: Dom.event => unit=?,
        ~on_unload: Dom.event => unit=?,
        unit
      ) =>
      Html_Attributes.t;
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.document))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_afterprint=?,
        ~on_beforeprint=?,
        ~on_beforeunload=?,
        ~on_hashchange=?,
        ~on_languagechange=?,
        ~on_message=?,
        ~on_messageerror=?,
        ~on_offline=?,
        ~on_online=?,
        ~on_pagehide=?,
        ~on_pageshow=?,
        ~on_popstate=?,
        ~on_resize=?,
        ~on_rejectionhandled=?,
        ~on_storage=?,
        ~on_unhandledrejection=?,
        ~on_unload=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "body",
      Util.merge_all([|
        Attributes.make(
          ~on_afterprint?,
          ~on_beforeprint?,
          ~on_beforeunload?,
          ~on_hashchange?,
          ~on_languagechange?,
          ~on_message?,
          ~on_messageerror?,
          ~on_offline?,
          ~on_online?,
          ~on_pagehide?,
          ~on_pageshow?,
          ~on_popstate?,
          ~on_resize?,
          ~on_rejectionhandled?,
          ~on_storage?,
          ~on_unhandledrejection?,
          ~on_unload?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Br = {
  type t(+'a) = Html_Node.t([> Html_Node.br] as 'a);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "br",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Button = {
  type t(+'a) = Html_Node.t([> Html_Node.button] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.deriving jsConverter]
    type _type = [ | `submit | `reset | `button];

    [@bs.obj]
    external _make:
      (
        ~autofocus: string=?,
        ~disabled: string=?,
        ~form: string=?,
        ~formaction: string=?,
        ~formenctype: string=?,
        ~formmethod: string=?,
        ~formnovalidate: string=?,
        ~formtarget: string=?,
        ~formelements: string=?,
        ~name: string=?,
        ~_type: string=?,
        ~value: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~autofocus=?,
          ~disabled=?,
          ~form=?,
          ~formaction=?,
          ~formenctype=?,
          ~formmethod=?,
          ~formnovalidate=?,
          ~formtarget=?,
          ~formelements=?,
          ~name=?,
          ~_type=?,
          ~value=?,
          (),
        ) =>
      _make(
        ~autofocus=?Belt.Option.map(autofocus, Util.string_of_unit),
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~form?,
        ~formaction?,
        ~formenctype=?
          Belt.Option.map(formenctype, Html_Attributes.Form.Enctype.show),
        ~formmethod=?
          Belt.Option.map(formmethod, Html_Attributes.Form.Method.show),
        ~formnovalidate=?Belt.Option.map(formnovalidate, Util.string_of_unit),
        ~formtarget=?Belt.Option.map(formtarget, Html_Attributes.Target.show),
        ~formelements?,
        ~name?,
        ~_type=?Belt.Option.map(_type, _typeToJs),
        ~value?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.link
                 | Html_Attributes.Aria.button
                 | Html_Attributes.Aria.radio
                 | Html_Attributes.Aria.switch_
               ],
             ),
           )=?,
        ~autofocus=?,
        ~disabled=?,
        ~form=?,
        ~formaction=?,
        ~formenctype=?,
        ~formmethod=?,
        ~formnovalidate=?,
        ~formtarget=?,
        ~formelements=?,
        ~name=?,
        ~_type=?,
        ~value=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline_block))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline_block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "button",
      Util.merge_all([|
        Attributes.make(
          ~autofocus?,
          ~disabled?,
          ~form?,
          ~formaction?,
          ~formenctype?,
          ~formmethod?,
          ~formnovalidate?,
          ~formtarget?,
          ~formelements?,
          ~name?,
          ~_type?,
          ~value?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Canvas = {
  type t(+'a) = Html_Node.t([> Html_Node.canvas] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.embedded
        | Html_Node.palpable('a)
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj]
    external make: (~width: int=?, ~height: int=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~height=?,
        ~width=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "canvas",
      Util.merge_all([|
        Attributes.make(~height?, ~width?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Caption = {
  type t(+'a) = Html_Node.t([> Html_Node.caption] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_caption))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_caption))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "caption",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Cite = {
  type t(+'a) = Html_Node.t([> Html_Node.cite] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "cite",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Code = {
  type t(+'a) = Html_Node.t([> Html_Node.code] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "code",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Col = {
  type t(+'a) = Html_Node.t([> Html_Node.col] as 'a);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "col",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Colgroup = {
  type t(+'a) = Html_Node.t([> Html_Node.colgroup] as 'a);

  type child =
    Html_Node.t([ Html_Node.col | Html_Node.template | Html_Node.fragment]);

  module Attributes = {
    [@bs.obj] external make: (~span: int=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~span=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_column_group))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_column_group))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "colgroup",
      Util.merge_all([|
        Attributes.make(~span?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Data = {
  type t(+'a) = Html_Node.t([> Html_Node.data] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external make: (~value: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~value=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "data",
      Util.merge_all([|
        Attributes.make(~value?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Datalist = {
  type t(+'a) = Html_Node.t([> Html_Node.datalist] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.phrasing('a)
        | Html_Node.option
        | Html_Node.Element.script_supporting
        | Html_Node.other
      ],
    );

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.listbox))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child(_)),
      )
      : t(_) =>
    Declaredom.make(
      "datalist",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Dd = {
  type t(+'a) = Html_Node.t([> Html_Node.dd] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "dd",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Del = {
  type t(+'a) = Html_Node.t([> Html_Node.del] as 'a);

  type child(+'a) =
    Html_Node.t(
      [ Html_Node.flow('a) | Html_Node.phrasing('a) | Html_Node.other],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (~cite: string=?, ~datetime: string=?, unit) => Html_Attributes.t;

    let make = (~cite=?, ~datetime=?, ()) =>
      _make(
        ~cite?,
        ~datetime=?Belt.Option.map(datetime, Js.Date.toISOString),
        (),
      );
  };

  let make =
      (
        ~aria=?,
        ~cite=?,
        ~datetime=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "del",
      Util.merge_all([|
        Attributes.make(~cite?, ~datetime?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Details = {
  type t(+'a) = Html_Node.t([> Html_Node.details] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.flow('a) | Html_Node.summary | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external _make: (~_open: string=?, unit) => Html_Attributes.t;
    let make = (~_open=?, ()) =>
      _make(~_open=?Belt.Option.map(_open, Util.string_of_unit), ());
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.group))=?,
        ~_open=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "details",
      Util.merge_all([|
        Attributes.make(~_open?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Dfn = {
  type t(+'a) = Html_Node.t([> Html_Node.dfn] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "dfn",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Dialog = {
  type t(+'a) = Html_Node.t([> Html_Node.dialog] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external _make: (~_open: string=?, unit) => Html_Attributes.t;
    let make = (~_open=?, ()) =>
      _make(~_open=?Belt.Option.map(_open, Util.string_of_unit), ());
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.dialog
                 | Html_Attributes.Aria.alertdialog
               ],
             ),
           )=?,
        ~_open=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "dialog",
      Util.merge_all([|
        Attributes.make(~_open?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Div = {
  type t(+'a) = Html_Node.t([> Html_Node.div] as 'a);
  type children(+'a) = [ Html_Node.flow('a) | Html_Node.other];
  type child(+'a) = Html_Node.t(children('a));

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "div",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Dl = {
  type t(+'a) = Html_Node.t([> Html_Node.dl] as 'a);

  type child =
    Html_Node.t(
      [
        Html_Node.dd
        | Html_Node.dt
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.list
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "dl",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Dt = {
  type t(+'a) = Html_Node.t([> Html_Node.dt] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "dt",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Em = {
  type t(+'a) = Html_Node.t([> Html_Node.em] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "em",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Embed = {
  type t(+'a) = Html_Node.t([> Html_Node.embed] as 'a);

  module Attributes = {
    [@bs.obj]
    external make:
      (
        ~src: string=?,
        ~_type: string=?,
        ~width: int=?,
        ~height: int=?,
        unit
      ) =>
      Html_Attributes.t;
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.application
                 | Html_Attributes.Aria.document
                 | Html_Attributes.Aria.img
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~src=?,
        ~_type=?,
        ~width=?,
        ~height=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.replaced_inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.replaced_inline))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "embed",
      Util.merge_all([|
        Attributes.make(~src?, ~_type?, ~width?, ~height?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Fieldset = {
  type t(+'a) = Html_Node.t([> Html_Node.fieldset] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.flow('a) | Html_Node.legend | Html_Node.other]);

  module Attributes = {
    [@bs.obj]
    external _make:
      (~disabled: string=?, ~form: string=?, ~name: string=?, unit) =>
      Html_Attributes.t;

    let make = (~form=?, ~name=?, ~disabled=?, ()) =>
      _make(
        ~form?,
        ~name?,
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~form=?,
        ~name=?,
        ~disabled=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "fieldset",
      Util.merge_all([|
        Attributes.make(~form?, ~name?, ~disabled?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Figcaption = {
  type t(+'a) = Html_Node.t([> Html_Node.figcaption] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "figcaption",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Figure = {
  type t(+'a) = Html_Node.t([> Html_Node.figure] as 'a);

  type child(+'a) =
    Html_Node.t(
      [ Html_Node.flow('a) | Html_Node.figcaption | Html_Node.other],
    );

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.figure
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "figure",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Footer = {
  type t(+'a) = Html_Node.t([> Html_Node.footer] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.contentinfo
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "footer",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Form = {
  type t(+'a) = Html_Node.t([> Html_Node.form] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  module Attributes = {
    [@bs.deriving jsConverter]
    type autocomplete = [ | `on | `off];

    [@bs.obj]
    external _make:
      (
        ~accept_charset: string=?,
        ~action: string=?,
        ~autocomplete: string=?,
        ~enctype: string=?,
        ~_method: string=?,
        ~name: string=?,
        ~novalidate: string=?,
        ~target: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~accept_charset=?,
          ~action=?,
          ~autocomplete=?,
          ~enctype=?,
          ~_method=?,
          ~name=?,
          ~novalidate=?,
          ~target=?,
          (),
        ) =>
      _make(
        ~accept_charset?,
        ~action?,
        ~autocomplete=?Belt.Option.map(autocomplete, autocompleteToJs),
        ~enctype=?Belt.Option.map(enctype, Html_Attributes.Form.Enctype.show),
        ~_method=?Belt.Option.map(_method, Html_Attributes.Form.Method.show),
        ~name?,
        ~novalidate=?Belt.Option.map(novalidate, Util.string_of_unit),
        ~target=?Belt.Option.map(target, Html_Attributes.Target.show),
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.form
                 | Html_Attributes.Aria.search
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accept_charset=?,
        ~action=?,
        ~autocomplete=?,
        ~enctype=?,
        ~_method=?,
        ~name=?,
        ~novalidate=?,
        ~target=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "form",
      Util.merge_all([|
        Attributes.make(
          ~accept_charset?,
          ~action?,
          ~autocomplete?,
          ~enctype?,
          ~_method?,
          ~name?,
          ~novalidate?,
          ~target?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H1 = {
  type t(+'a) = Html_Node.t([> Html_Node.h1] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h1",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H2 = {
  type t(+'a) = Html_Node.t([> Html_Node.h2] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h2",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H3 = {
  type t(+'a) = Html_Node.t([> Html_Node.h3] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h3",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H4 = {
  type t(+'a) = Html_Node.t([> Html_Node.h4] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h4",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H5 = {
  type t(+'a) = Html_Node.t([> Html_Node.h5] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h5",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module H6 = {
  type t(+'a) = Html_Node.t([> Html_Node.h6] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.heading
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "h6",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Head = {
  type t(+'a) = Html_Node.t([> Html_Node.head] as 'a);

  type child = Html_Node.t([ Html_Node.metadata | Html_Node.fragment]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child),
      )
      : t(_) =>
    Declaredom.make(
      "head",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Header = {
  type t(+'a) = Html_Node.t([> Html_Node.header] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.banner
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "header",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Hgroup = {
  type t(+'a) = Html_Node.t([> Html_Node.hgroup] as 'a);

  type child =
    Html_Node.t(
      [
        Html_Node.headings
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "hgroup",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Hr = {
  type t(+'a) = Html_Node.t([> Html_Node.hr] as 'a);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.separator
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "hr",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Html = {
  type t(+'a) = Html_Node.t([> Html_Node.html] as 'a);

  type child =
    Html_Node.t([ Html_Node.head | Html_Node.body | Html_Node.fragment]);

  module Attributes = {
    [@bs.obj] external make: (~manifest: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~manifest=?,
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child),
      )
      : t(_) =>
    Declaredom.make(
      "html",
      Util.merge_all([|
        Attributes.make(~manifest?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module I = {
  type t(+'a) = Html_Node.t([> Html_Node.i] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "i",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Iframe = {
  type t(+'a) = Html_Node.t([> Html_Node.iframe] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type sandbox = [
      | [@bs.as "allow-forms"] `allow_forms
      | [@bs.as "allow-modals"] `allow_modals
      | [@bs.as "allow-orientation-lock"] `allow_orientation_lock
      | [@bs.as "allow-pointer-lock"] `allow_pointer_lock
      | [@bs.as "allow-popups"] `allow_popups
      | [@bs.as "allow-popups-to-escape-sandbox"]
        `allow_popups_to_escape_sandbox
      | [@bs.as "allow-presentation"] `allow_presentation
      | [@bs.as "allow-same-origin"] `allow_same_origin
      | [@bs.as "allow-scripts"] `allow_scripts
      | [@bs.as "allow-top-navigation"] `allow_top_navigation
      | [@bs.as "allow-top-navigation-by-user-activation"]
        `allow_top_navigation_by_user_activation
    ];

    [@bs.obj]
    external _make:
      (
        ~src: string=?,
        ~srcdoc: string=?,
        ~name: string=?,
        ~sandbox: string=?,
        ~allow: string=?,
        ~allowfullscreen: string=?,
        ~allowpaymentrequest: string=?,
        ~width: int=?,
        ~height: int=?,
        ~referrerpolicy: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~src=?,
          ~srcdoc=?,
          ~name=?,
          ~sandbox=?,
          ~allow=?,
          ~allowfullscreen=?,
          ~allowpaymentrequest=?,
          ~width=?,
          ~height=?,
          ~referrerpolicy=?,
          (),
        ) =>
      _make(
        ~src?,
        ~srcdoc?,
        ~name?,
        ~sandbox=?Belt.Option.map(sandbox, sandboxToJs),
        ~allow?,
        ~allowfullscreen=?
          Belt.Option.map(allowfullscreen, Util.string_of_unit),
        ~allowpaymentrequest=?
          Belt.Option.map(allowpaymentrequest, Util.string_of_unit),
        ~width?,
        ~height?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.application
                 | Html_Attributes.Aria.document
                 | Html_Attributes.Aria.img
               ],
             ),
           )=?,
        ~src=?,
        ~srcdoc=?,
        ~name=?,
        ~sandbox=?,
        ~allow=?,
        ~allowfullscreen=?,
        ~allowpaymentrequest=?,
        ~width=?,
        ~height=?,
        ~referrerpolicy=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.replaced_inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.replaced_inline))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "iframe",
      Util.merge_all([|
        Attributes.make(
          ~src?,
          ~srcdoc?,
          ~name?,
          ~sandbox?,
          ~allow?,
          ~allowfullscreen?,
          ~allowpaymentrequest?,
          ~width?,
          ~height?,
          ~referrerpolicy?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Img = {
  type t(+'a) = Html_Node.t([> Html_Node.img] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type decoding = [ | `sync | `async | `auto];

    [@bs.obj]
    external _make:
      (
        ~alt: string=?,
        ~src: string=?,
        ~srcset: string=?,
        ~sizes: string=?,
        ~crossorigin: string=?,
        ~usemap: string=?,
        ~ismap: string=?,
        ~width: int=?,
        ~height: int=?,
        ~referrerpolicy: string=?,
        ~decoding: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~alt=?,
          ~src=?,
          ~srcset=?,
          ~sizes=?,
          ~crossorigin=?,
          ~usemap=?,
          ~ismap=?,
          ~width=?,
          ~height=?,
          ~referrerpolicy=?,
          ~decoding=?,
          (),
        ) =>
      _make(
        ~alt?,
        ~src?,
        ~srcset?,
        ~sizes?,
        ~crossorigin=?
          Belt.Option.map(crossorigin, Html_Attributes.CrossOrigin.show),
        ~usemap?,
        ~ismap=?Belt.Option.map(ismap, Util.string_of_unit),
        ~width?,
        ~height?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        ~decoding=?Belt.Option.map(decoding, decodingToJs),
        (),
      );
  };

  let make =
      (
        ~aria=?,
        ~alt=?,
        ~src=?,
        ~srcset=?,
        ~sizes=?,
        ~crossorigin=?,
        ~usemap=?,
        ~ismap=?,
        ~width=?,
        ~height=?,
        ~referrerpolicy=?,
        ~decoding=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.replaced_inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.replaced_inline))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "img",
      Util.merge_all([|
        Attributes.make(
          ~alt?,
          ~src?,
          ~srcset?,
          ~sizes?,
          ~crossorigin?,
          ~usemap?,
          ~ismap?,
          ~width?,
          ~height?,
          ~referrerpolicy?,
          ~decoding?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Input = {
  type t(+'a) = Html_Node.t([> Html_Node.input] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type _type = [
      | `hidden
      | `text
      | `search
      | `tel
      | `url
      | `email
      | `password
      | `date
      | `month
      | `week
      | `time
      | [@bs.as "datetime-local"] `datetime_local
      | `number
      | `range
      | `color
      | `checkbox
      | `radio
      | `file
      | `submit
      | `image
      | `reset
      | `button
    ];

    type step = [ | `any | `step_value(float)];

    let stepToJs: step => string = (
      fun
      | `any => "any"
      | `step_value(value) => Js.Float.toString(value):
        step => string
    );

    [@bs.obj]
    external _make:
      (
        ~accept: string=?,
        ~alt: string=?,
        ~autocomplete: string=?,
        ~autofocus: string=?,
        ~checked: string=?,
        ~dirname: string=?,
        ~disabled: string=?,
        ~form: string=?,
        ~formaction: string=?,
        ~formenctype: string=?,
        ~formmethod: string=?,
        ~formnovalidate: string=?,
        ~formtarget: string=?,
        ~height: int=?,
        ~list: string=?,
        ~max: string=?,
        ~maxlength: int=?,
        ~min: string=?,
        ~minlength: int=?,
        ~multiple: string=?,
        ~name: string=?,
        ~pattern: string=?,
        ~placeholder: string=?,
        ~readonly: string=?,
        ~required: string=?,
        ~size: int=?,
        ~src: string=?,
        ~step: string=?,
        ~_type: string=?,
        ~value: 'a=?,
        ~width: int=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~accept=?,
          ~alt=?,
          ~autocomplete=?,
          ~autofocus=?,
          ~checked=?,
          ~dirname=?,
          ~disabled=?,
          ~form=?,
          ~formaction=?,
          ~formenctype=?,
          ~formmethod=?,
          ~formnovalidate=?,
          ~formtarget=?,
          ~height=?,
          ~list=?,
          ~max=?,
          ~maxlength=?,
          ~min=?,
          ~minlength=?,
          ~multiple=?,
          ~name=?,
          ~pattern=?,
          ~placeholder=?,
          ~readonly=?,
          ~required=?,
          ~size=?,
          ~src=?,
          ~step=?,
          ~_type=?,
          ~value=?,
          ~width=?,
          (),
        ) =>
      _make(
        ~accept?,
        ~alt?,
        ~autocomplete=?
          Belt.Option.map(autocomplete, Html_Attributes.AutoComplete.show),
        ~autofocus=?Belt.Option.map(autofocus, Util.string_of_unit),
        ~checked=?Belt.Option.map(checked, Util.string_of_unit),
        ~dirname=?Belt.Option.map(dirname, Html_Attributes.Dirname.show),
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~form?,
        ~formaction?,
        ~formenctype=?
          Belt.Option.map(formenctype, Html_Attributes.Form.Enctype.show),
        ~formmethod=?
          Belt.Option.map(formmethod, Html_Attributes.Form.Method.show),
        ~formnovalidate=?Belt.Option.map(formnovalidate, Util.string_of_unit),
        ~formtarget=?Belt.Option.map(formtarget, Html_Attributes.Target.show),
        ~height?,
        ~list?,
        ~max?,
        ~maxlength?,
        ~min?,
        ~minlength?,
        ~multiple=?Belt.Option.map(multiple, Util.string_of_unit),
        ~name?,
        ~pattern=?Belt.Option.map(pattern, Js.Re.source),
        ~placeholder?,
        ~readonly=?Belt.Option.map(readonly, Util.string_of_unit),
        ~required=?Belt.Option.map(required, Util.string_of_unit),
        ~size?,
        ~src?,
        ~step=?Belt.Option.map(step, stepToJs),
        ~_type=?Belt.Option.map(_type, _typeToJs),
        ~value?,
        ~width?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.textbox
                 | Html_Attributes.Aria.searchbox
                 | Html_Attributes.Aria.combobox
                 | Html_Attributes.Aria.spinbutton
                 | Html_Attributes.Aria.slider
                 | Html_Attributes.Aria.checkbox
                 | Html_Attributes.Aria.option
                 | Html_Attributes.Aria.switch_
                 | Html_Attributes.Aria.radio
                 | Html_Attributes.Aria.button
                 | Html_Attributes.Aria.link
               ],
             ),
           )=?,
        ~accept=?,
        ~alt=?,
        ~autocomplete=?,
        ~autofocus=?,
        ~checked=?,
        ~dirname=?,
        ~disabled=?,
        ~form=?,
        ~formaction=?,
        ~formenctype=?,
        ~formmethod=?,
        ~formnovalidate=?,
        ~formtarget=?,
        ~height=?,
        ~list=?,
        ~max=?,
        ~maxlength=?,
        ~min=?,
        ~minlength=?,
        ~multiple=?,
        ~name=?,
        ~pattern=?,
        ~placeholder=?,
        ~readonly=?,
        ~required=?,
        ~size=?,
        ~src=?,
        ~step=?,
        ~_type=?,
        ~value=?,
        ~width=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "input",
      Util.merge_all([|
        Attributes.make(
          ~accept?,
          ~alt?,
          ~autocomplete?,
          ~autofocus?,
          ~checked?,
          ~dirname?,
          ~disabled?,
          ~form?,
          ~formaction?,
          ~formenctype?,
          ~formmethod?,
          ~formnovalidate?,
          ~formtarget?,
          ~height?,
          ~list?,
          ~max?,
          ~maxlength?,
          ~min?,
          ~minlength?,
          ~multiple?,
          ~name?,
          ~pattern?,
          ~placeholder?,
          ~readonly?,
          ~required?,
          ~size?,
          ~src?,
          ~step?,
          ~_type?,
          ~value?,
          ~width?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Ins = {
  type t(+'a) = Html_Node.t([> Html_Node.ins] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.palpable('a)
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (~cite: string=?, ~datetime: string=?, unit) => Html_Attributes.t;

    let make = (~cite=?, ~datetime=?, ()) =>
      _make(
        ~cite?,
        ~datetime=?Belt.Option.map(datetime, Js.Date.toISOString),
        (),
      );
  };

  let make =
      (
        ~aria=?,
        ~cite=?,
        ~datetime=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "ins",
      Util.merge_all([|
        Attributes.make(~cite?, ~datetime?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Kbd = {
  type t(+'a) = Html_Node.t([> Html_Node.kbd] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "kbd",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Label = {
  type t(+'a) = Html_Node.t([> Html_Node.label] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external make: (~_for: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~_for=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "label",
      Util.merge_all([|
        Attributes.make(~_for?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Legend = {
  type t(+'a) = Html_Node.t([> Html_Node.legend] as 'a);

  type child(+'a) =
    Html_Node.t(
      [ Html_Node.phrasing('a) | Html_Node.headings | Html_Node.other],
    );

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "legend",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Li = {
  type t(+'a) = Html_Node.t([> Html_Node.li] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.listitem
                 | Html_Attributes.Aria.option
                 | Html_Attributes.Aria.presentation
                 | Html_Attributes.Aria.radio
                 | Html_Attributes.Aria.separator
                 | Html_Attributes.Aria.tab
                 | Html_Attributes.Aria.treeitem
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.list_item))=?,
        ~css_module: option(Css_Module.t(Css_Property.list_item))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "li",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Link = {
  type t(+'a) = Html_Node.t([> Html_Node.link] as 'a);

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~href: string=?,
        ~crossorigin: string=?,
        ~rel: string=?,
        ~media: string=?,
        ~integrity: string=?,
        ~hreflang: string=?,
        ~_type: string=?,
        ~referrerpolicy: string=?,
        ~sizes: string=?,
        ~_as: string=?,
        ~color: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~href=?,
          ~crossorigin=?,
          ~rel=?,
          ~media=?,
          ~integrity=?,
          ~hreflang=?,
          ~_type=?,
          ~referrerpolicy=?,
          ~sizes=?,
          ~_as=?,
          ~color=?,
          (),
        ) =>
      _make(
        ~href?,
        ~crossorigin=?
          Belt.Option.map(crossorigin, Html_Attributes.CrossOrigin.show),
        ~rel=?Belt.Option.map(rel, Html_Attributes.LinkType.show),
        ~media=?Belt.Option.map(media, Css_Media.show),
        ~integrity?,
        ~hreflang?,
        ~_type?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        ~sizes?,
        ~_as?,
        ~color=?Belt.Option.map(color, Css_Value.Color.show),
        (),
      );
  };

  let make =
      (
        ~href=?,
        ~crossorigin=?,
        ~rel=?,
        ~media=?,
        ~integrity=?,
        ~hreflang=?,
        ~_type=?,
        ~referrerpolicy=?,
        ~sizes=?,
        ~_as=?,
        ~color=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "link",
      Util.merge_all([|
        Attributes.make(
          ~href?,
          ~crossorigin?,
          ~rel?,
          ~media?,
          ~integrity?,
          ~hreflang?,
          ~_type?,
          ~referrerpolicy?,
          ~sizes?,
          ~_as?,
          ~color?,
          (),
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Main = {
  type t(+'a) = Html_Node.t([> Html_Node.main] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.main
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "main",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Map = {
  type t(+'a) = Html_Node.t([> Html_Node.map] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.palpable('a)
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj] external make: (~name: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~name=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "map",
      Util.merge_all([|
        Attributes.make(~name?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Mark = {
  type t(+'a) = Html_Node.t([> Html_Node.mark] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "mark",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Meta = {
  type t(+'a) = Html_Node.t([> Html_Node.meta] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type http_equiv = [
      | [@bs.as "content-language"] `content_language
      | [@bs.as "content-type"] `content_type
      | [@bs.as "default-style"] `default_style
      | `refresh
      | [@bs.as "set-cookie"] `set_cookie
      | [@bs.as "x-ua-compatible"] `x_ua_compatible
      | [@bs.as "content-security-policy"] `content_security_policy
    ];

    [@bs.obj]
    external _make:
      (
        ~name: string=?,
        ~http_equiv: string=?,
        ~content: string=?,
        ~charset: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make = (~name=?, ~http_equiv=?, ~content=?, ~charset=?, ()) =>
      _make(
        ~name?,
        ~http_equiv=?Belt.Option.map(http_equiv, http_equivToJs),
        ~content?,
        ~charset?,
        (),
      );
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~name=?,
        ~http_equiv=?,
        ~content=?,
        ~charset=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "meta",
      Util.merge_all([|
        Attributes.make(~name?, ~http_equiv?, ~content?, ~charset?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Meter = {
  type t(+'a) = Html_Node.t([> Html_Node.meter] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj]
    external make:
      (
        ~value: float=?,
        ~min: float=?,
        ~max: float=?,
        ~low: float=?,
        ~high: float=?,
        ~optimum: float=?,
        unit
      ) =>
      Html_Attributes.t;
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~value=?,
        ~min=?,
        ~max=?,
        ~low=?,
        ~high=?,
        ~optimum=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline_block))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline_block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "meter",
      Util.merge_all([|
        Attributes.make(~value?, ~min?, ~max?, ~low?, ~high?, ~optimum?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Nav = {
  type t(+'a) = Html_Node.t([> Html_Node.nav] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.navigation))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline_block))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline_block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "nav",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Noscript = {
  type t(+'a) = Html_Node.t([> Html_Node.noscript] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.metadata
        | Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.other
      ],
    );

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child(_)),
      )
      : t(_) =>
    Declaredom.make(
      "noscript",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Object = {
  type t(+'a) = Html_Node.t([> Html_Node.object_] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.param
        | Html_Node.flow('a)
        | Html_Node.phrasing('a)
        | Html_Node.embedded
        | Html_Node.interactive
        | Html_Node.Element.listed
        | Html_Node.Element.submittable
        | Html_Node.palpable('a)
        | Html_Node.other
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~data: string=?,
        ~_type: string=?,
        ~typemustmatch: string=?,
        ~name: string=?,
        ~usemap: string=?,
        ~form: string=?,
        ~width: int=?,
        ~height: int=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~data=?,
          ~_type=?,
          ~typemustmatch=?,
          ~name=?,
          ~usemap=?,
          ~form=?,
          ~width=?,
          ~height=?,
          (),
        ) =>
      _make(
        ~data?,
        ~_type?,
        ~typemustmatch=?Belt.Option.map(typemustmatch, Util.string_of_unit),
        ~name?,
        ~usemap?,
        ~form?,
        ~width?,
        ~height?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.application
                 | Html_Attributes.Aria.document
                 | Html_Attributes.Aria.img
                 | Html_Attributes.Aria.presentation
               ],
             ),
           )=?,
        ~data=?,
        ~_type=?,
        ~typemustmatch=?,
        ~name=?,
        ~usemap=?,
        ~form=?,
        ~width=?,
        ~height=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "object",
      Util.merge_all([|
        Attributes.make(
          ~data?,
          ~_type?,
          ~typemustmatch?,
          ~name?,
          ~usemap?,
          ~form?,
          ~width?,
          ~height?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Ol = {
  type t(+'a) = Html_Node.t([> Html_Node.ol] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.li
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  module Attributes = {
    [@bs.deriving jsConverter]
    type _type = [
      | `decimal
      | [@bs.as "lower-alpha"] `lower_alpha
      | [@bs.as "upper-alpha"] `upper_alpha
      | [@bs.as "lower-roman"] `lower_roman
      | [@bs.as "upper-roman"] `upper_roman
    ];

    [@bs.obj]
    external _make:
      (~reversed: string=?, ~start: int=?, ~_type: string=?, unit) =>
      Html_Attributes.t;

    let make = (~reversed=?, ~start=?, ~_type=?, ()) =>
      _make(
        ~reversed=?Belt.Option.map(reversed, Util.string_of_unit),
        ~start?,
        ~_type=?Belt.Option.map(_type, _typeToJs),
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.list
                 | Html_Attributes.Aria.directory
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.listbox
                 | Html_Attributes.Aria.menubar
                 | Html_Attributes.Aria.presentation
                 | Html_Attributes.Aria.radiogroup
                 | Html_Attributes.Aria.tablist
                 | Html_Attributes.Aria.toolbar
                 | Html_Attributes.Aria.tree
               ],
             ),
           )=?,
        ~reversed=?,
        ~start=?,
        ~_type=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "ol",
      Util.merge_all([|
        Attributes.make(~reversed?, ~start?, ~_type?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Optgroup = {
  type t(+'a) = Html_Node.t([> Html_Node.optgroup] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.option
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (~disabled: string=?, ~label: string=?, unit) => Html_Attributes.t;

    let make = (~disabled=?, ~label=?, ()) =>
      _make(
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~label?,
        (),
      );
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~disabled=?,
        ~label,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "optgroup",
      Util.merge_all([|
        Attributes.make(~disabled?, ~label, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Option = {
  type t(+'a) = Html_Node.t([> Html_Node.option] as 'a);

  type child(+'a) = Html_Node.t(Html_Node.other);

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~disabled: string=?,
        ~label: string=?,
        ~selected: string=?,
        ~value: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make = (~disabled=?, ~label=?, ~selected=?, ~value=?, ()) =>
      _make(
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~selected=?Belt.Option.map(selected, Util.string_of_unit),
        ~label?,
        ~value?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.option
                 | Html_Attributes.Aria.separator
               ],
             ),
           )=?,
        ~disabled=?,
        ~label=?,
        ~selected=?,
        ~value=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "option",
      Util.merge_all([|
        Attributes.make(~disabled?, ~label?, ~selected?, ~value?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Output = {
  type t(+'a) = Html_Node.t([> Html_Node.output] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj]
    external make:
      (~_for: string=?, ~form: string=?, ~name: string=?, unit) =>
      Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~_for=?,
        ~form=?,
        ~name=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "output",
      Util.merge_all([|
        Attributes.make(~_for?, ~form?, ~name?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module P = {
  type t(+'a) = Html_Node.t([> Html_Node.p] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "p",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Param = {
  type t(+'a) = Html_Node.t([> Html_Node.param] as 'a);

  module Attributes = {
    [@bs.obj]
    external make:
      (~name: string=?, ~value: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~name=?,
        ~value=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "param",
      Util.merge_all([|
        Attributes.make(~name?, ~value?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Picture = {
  type t(+'a) = Html_Node.t([> Html_Node.picture] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.img
        | Html_Node.source
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "picture",
      Util.merge_all([|
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Pre = {
  type t(+'a) = Html_Node.t([> Html_Node.pre] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "pre",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Progress = {
  type t(+'a) = Html_Node.t([> Html_Node.progress] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj]
    external make: (~value: float=?, ~max: float=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria:
           option(Html_Attributes.Aria.t(Html_Attributes.Aria.progressbar))=?,
        ~value=?,
        ~max=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline_block))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline_block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "progress",
      Util.merge_all([|
        Attributes.make(~value?, ~max?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Q = {
  type t(+'a) = Html_Node.t([> Html_Node.q] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external make: (~cite: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~cite=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "q",
      Util.merge_all([|
        Attributes.make(~cite?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Rb = {
  type t(+'a) = Html_Node.t([> Html_Node.rb] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.ruby_base))=?,
        ~css_module: option(Css_Module.t(Css_Property.ruby_base))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "rb",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Rp = {
  type t(+'a) = Html_Node.t([> Html_Node.rp] as 'a);

  type child = Html_Node.t(Html_Node.other);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child),
      )
      : t(_) =>
    Declaredom.make(
      "rp",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Rt = {
  type t(+'a) = Html_Node.t([> Html_Node.rt] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.ruby_text))=?,
        ~css_module: option(Css_Module.t(Css_Property.ruby_text))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "rt",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Rtc = {
  type t(+'a) = Html_Node.t([> Html_Node.rtc] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.phrasing('a)
        | Html_Node.rt
        | Html_Node.rp
        | Html_Node.other
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.ruby_text_container))=?,
        ~css_module: option(Css_Module.t(Css_Property.ruby_text_container))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "rtc",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Ruby = {
  type t(+'a) = Html_Node.t([> Html_Node.ruby] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.phrasing('a)
        | Html_Node.rp
        | Html_Node.rt
        | Html_Node.rb
        | Html_Node.rtc
        | Html_Node.other
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.ruby))=?,
        ~css_module: option(Css_Module.t(Css_Property.ruby))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "ruby",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module S = {
  type t(+'a) = Html_Node.t([> Html_Node.s] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "s",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Samp = {
  type t(+'a) = Html_Node.t([> Html_Node.samp] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "samp",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Script = {
  type t(+'a) = Html_Node.t([> Html_Node.script] as 'a);

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~src: string=?,
        ~_type: string=?,
        ~nomodule: string=?,
        ~async: string=?,
        ~defer: string=?,
        ~crossorigin: string=?,
        ~integrity: string=?,
        ~referrerpolicy: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~src=?,
          ~_type=?,
          ~nomodule=?,
          ~async=?,
          ~defer=?,
          ~crossorigin=?,
          ~integrity=?,
          ~referrerpolicy=?,
          (),
        ) =>
      _make(
        ~src?,
        ~_type?,
        ~nomodule=?Belt.Option.map(nomodule, Util.string_of_unit),
        ~async=?Belt.Option.map(async, Util.string_of_unit),
        ~defer=?Belt.Option.map(defer, Util.string_of_unit),
        ~crossorigin=?
          Belt.Option.map(crossorigin, Html_Attributes.CrossOrigin.show),
        ~integrity?,
        ~referrerpolicy=?
          Belt.Option.map(
            referrerpolicy,
            Html_Attributes.ReferrerPolicy.show,
          ),
        (),
      );
  };

  let make =
      (
        ~src=?,
        ~_type=?,
        ~nomodule=?,
        ~async=?,
        ~defer=?,
        ~crossorigin=?,
        ~integrity=?,
        ~referrerpolicy=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "script",
      Util.merge_all([|
        Attributes.make(
          ~src?,
          ~_type?,
          ~nomodule?,
          ~async?,
          ~defer?,
          ~crossorigin?,
          ~integrity?,
          ~referrerpolicy?,
          (),
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;

  /** An inline script element */

  let make_inline =
      (
        ~_type=?,
        ~nomodule=?,
        ~async=?,
        ~defer=?,
        ~crossorigin=?,
        ~integrity=?,
        ~referrerpolicy=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        contents,
      )
      : t(_) =>
    Declaredom.make_with_text(
      "script",
      Util.merge_all([|
        Attributes.make(
          ~_type?,
          ~nomodule?,
          ~async?,
          ~defer?,
          ~crossorigin?,
          ~integrity?,
          ~referrerpolicy?,
          (),
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      contents,
    )
    |> Internal.make;
};

module Section = {
  type t(+'a) = Html_Node.t([> Html_Node.section] as 'a);

  type children(+'a) = [ Html_Node.flow('a) | Html_Node.other];
  type child(+'a) = Html_Node.t(children('a));

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.region
                 | Html_Attributes.Aria.alert
                 | Html_Attributes.Aria.alertdialog
                 | Html_Attributes.Aria.application
                 | Html_Attributes.Aria.contentinfo
                 | Html_Attributes.Aria.dialog
                 | Html_Attributes.Aria.document
                 | Html_Attributes.Aria.feed
                 | Html_Attributes.Aria.log
                 | Html_Attributes.Aria.main
                 | Html_Attributes.Aria.marquee
                 | Html_Attributes.Aria.presentation
                 | Html_Attributes.Aria.region
                 | Html_Attributes.Aria.search
                 | Html_Attributes.Aria.status
                 | Html_Attributes.Aria.tabpanel
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "section",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Select = {
  type t(+'a) = Html_Node.t([> Html_Node.select] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.option
        | Html_Node.optgroup
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~autocomplete: string=?,
        ~autofocus: string=?,
        ~disabled: string=?,
        ~form: string=?,
        ~multiple: string=?,
        ~name: string=?,
        ~required: string=?,
        ~size: int=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~autocomplete=?,
          ~autofocus=?,
          ~disabled=?,
          ~form=?,
          ~multiple=?,
          ~name=?,
          ~required=?,
          ~size=?,
          (),
        ) =>
      _make(
        ~autocomplete=?
          Belt.Option.map(autocomplete, Html_Attributes.AutoComplete.show),
        ~autofocus=?Belt.Option.map(autofocus, Util.string_of_unit),
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~form?,
        ~multiple=?Belt.Option.map(multiple, Util.string_of_unit),
        ~name?,
        ~required=?Belt.Option.map(required, Util.string_of_unit),
        ~size?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.combobox
                 | Html_Attributes.Aria.listbox
               ],
             ),
           )=?,
        ~autocomplete=?,
        ~autofocus=?,
        ~disabled=?,
        ~form=?,
        ~multiple=?,
        ~name=?,
        ~required=?,
        ~size=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline_block))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline_block))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "select",
      Util.merge_all([|
        Attributes.make(
          ~autocomplete?,
          ~autofocus?,
          ~disabled?,
          ~form?,
          ~multiple?,
          ~name?,
          ~required?,
          ~size?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Slot = {
  type t(+'a) = Html_Node.t([> Html_Node.slot] as 'a);

  type child(+'a) =
    Html_Node.t(
      [ Html_Node.flow('a) | Html_Node.phrasing('a) | Html_Node.other],
    );

  module Attributes = {
    [@bs.obj] external make: (~name: string=?, unit) => Html_Attributes.t;
  };

  let make =
      (
        ~name=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        children: array(child(_)),
      )
      : t(_) =>
    Declaredom.make(
      "slot",
      Util.merge_all([|
        Attributes.make(~name?, ()),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Small = {
  type t(+'a) = Html_Node.t([> Html_Node.small] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "small",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Source = {
  type t(+'a) = Html_Node.t([> Html_Node.source] as 'a);

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~src: string=?,
        ~_type: string=?,
        ~srcset: string=?,
        ~sizes: string=?,
        ~media: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make = (~src=?, ~_type=?, ~srcset=?, ~sizes=?, ~media=?, ()) =>
      _make(
        ~src?,
        ~_type?,
        ~srcset?,
        ~sizes?,
        ~media=?Belt.Option.map(media, Css_Media.show),
        (),
      );
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~src=?,
        ~_type=?,
        ~srcset=?,
        ~sizes=?,
        ~media=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        (),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make_empty(
      "source",
      Util.merge_all([|
        Attributes.make(~src?, ~_type?, ~srcset?, ~sizes?, ~media?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
  };
};

module Span = {
  type t(+'a) = Html_Node.t([> Html_Node.span] as 'a);

  type children(+'a) = [ Html_Node.phrasing('a) | Html_Node.other];
  type child(+'a) = Html_Node.t(children('a));

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "span",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Strong = {
  type t(+'a) = Html_Node.t([> Html_Node.strong] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "strong",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Style = {
  type t(+'a) = Html_Node.t([> Html_Node.style] as 'a);

  module Attributes = {
    [@bs.obj] external _make: (~media: string=?, unit) => Html_Attributes.t;

    let make = (~media=?, ()) =>
      _make(~media=?Belt.Option.map(media, Css_Media.show), ());
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~media=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        contents,
      )
      : t(_) =>
    Declaredom.make_with_text(
      "style",
      Util.merge_all([|
        Attributes.make(~media?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      contents,
    )
    |> Internal.make;
};

module Sub = {
  type t(+'a) = Html_Node.t([> Html_Node.sub] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "sub",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Summary = {
  type t(+'a) = Html_Node.t([> Html_Node.summary] as 'a);

  type child(+'a) =
    Html_Node.t(
      [ Html_Node.phrasing('a) | Html_Node.headings | Html_Node.other],
    );

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.button))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "summary",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Sup = {
  type t(+'a) = Html_Node.t([> Html_Node.sup] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "sup",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Table = {
  type t(+'a) = Html_Node.t([> Html_Node.table] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.caption
        | Html_Node.colgroup
        | Html_Node.thead
        | Html_Node.tbody
        | Html_Node.tr
        | Html_Node.tfoot
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table))=?,
        ~css_module: option(Css_Module.t(Css_Property.table))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "table",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Tbody = {
  type t(+'a) = Html_Node.t([> Html_Node.tbody] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.tr
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_row_group))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_row_group))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "tbody",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Td = {
  type t(+'a) = Html_Node.t([> Html_Node.td] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj]
    external make:
      (~colspan: int=?, ~rowspan: int=?, ~headers: string=?, unit) =>
      Html_Attributes.t;
  };

  let make =
      (
        ~aria=?,
        ~colspan=?,
        ~rowspan=?,
        ~headers=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_cell))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_cell))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "td",
      Util.merge_all([|
        Attributes.make(~colspan?, ~rowspan?, ~headers?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Template = {
  type t(+'a) = Html_Node.t([> Html_Node.template] as 'a);

  type child(+'a) = Html_Node.t(Html_Node.content('a));

  let make =
      (
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        children: array(child(_)),
      )
      : t(_) =>
    Declaredom.make(
      "template",
      Util.merge_all([|
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
};

module Textarea = {
  type t(+'a) = Html_Node.t([> Html_Node.textarea] as 'a);

  type child = Html_Node.t(Html_Node.other);

  module Attributes = {
    [@bs.deriving jsConverter]
    type wrap = [ | `soft | `hard];

    [@bs.obj]
    external _make:
      (
        ~autocomplete: string=?,
        ~autofocus: string=?,
        ~cols: int=?,
        ~dirname: string=?,
        ~disabled: string=?,
        ~form: string=?,
        ~maxlength: int=?,
        ~minlength: int=?,
        ~name: string=?,
        ~placeholder: string=?,
        ~readonly: string=?,
        ~required: string=?,
        ~rows: int=?,
        ~wrap: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~autocomplete=?,
          ~autofocus=?,
          ~cols=?,
          ~dirname=?,
          ~disabled=?,
          ~form=?,
          ~maxlength=?,
          ~minlength=?,
          ~name=?,
          ~placeholder=?,
          ~readonly=?,
          ~required=?,
          ~rows=?,
          ~wrap=?,
          (),
        ) =>
      _make(
        ~autocomplete=?
          Belt.Option.map(autocomplete, Html_Attributes.AutoComplete.show),
        ~autofocus=?Belt.Option.map(autofocus, Util.string_of_unit),
        ~cols?,
        ~dirname=?Belt.Option.map(dirname, Html_Attributes.Dirname.show),
        ~disabled=?Belt.Option.map(disabled, Util.string_of_unit),
        ~form?,
        ~maxlength?,
        ~minlength?,
        ~name?,
        ~placeholder?,
        ~readonly=?Belt.Option.map(readonly, Util.string_of_unit),
        ~required=?Belt.Option.map(required, Util.string_of_unit),
        ~rows?,
        ~wrap=?Belt.Option.map(wrap, wrapToJs),
        (),
      );
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.textbox))=?,
        ~autocomplete=?,
        ~autofocus=?,
        ~cols=?,
        ~dirname=?,
        ~disabled=?,
        ~form=?,
        ~maxlength=?,
        ~minlength=?,
        ~name=?,
        ~placeholder=?,
        ~readonly=?,
        ~required=?,
        ~rows=?,
        ~wrap=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "textarea",
      Util.merge_all([|
        Attributes.make(
          ~autocomplete?,
          ~autofocus?,
          ~cols?,
          ~dirname?,
          ~disabled?,
          ~form?,
          ~maxlength?,
          ~minlength?,
          ~name?,
          ~placeholder?,
          ~readonly?,
          ~required?,
          ~rows?,
          ~wrap?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Tfoot = {
  type t(+'a) = Html_Node.t([> Html_Node.tfoot] as 'a);

  type child =
    Html_Node.t(
      [
        Html_Node.tr
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_footer_group))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_footer_group))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "tfoot",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Th = {
  type t(+'a) = Html_Node.t([> Html_Node.th] as 'a);

  type child(+'a) = Html_Node.t([ Html_Node.flow('a) | Html_Node.other]);

  module Attributes = {
    [@bs.deriving jsConverter]
    type scope = [ | `row | `col | `rowgroup | `colgroup | `auto];

    [@bs.obj]
    external _make:
      (
        ~colspan: int=?,
        ~rowspan: int=?,
        ~headers: string=?,
        ~scope: string=?,
        ~abbr: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make = (~colspan=?, ~rowspan=?, ~headers=?, ~scope=?, ~abbr=?, ()) =>
      _make(
        ~colspan?,
        ~rowspan?,
        ~headers?,
        ~scope=?Belt.Option.map(scope, scopeToJs),
        ~abbr?,
        (),
      );
  };

  let make =
      (
        ~aria=?,
        ~colspan=?,
        ~rowspan=?,
        ~headers=?,
        ~scope=?,
        ~abbr=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_cell))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_cell))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "th",
      Util.merge_all([|
        Attributes.make(~colspan?, ~rowspan?, ~headers?, ~scope?, ~abbr?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Thead = {
  type t(+'a) = Html_Node.t([> Html_Node.thead] as 'a);

  type child(+'a) =
    Html_Node.t(
      [
        Html_Node.tr
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_header_group))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_header_group))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "thead",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Time = {
  type t(+'a) = Html_Node.t([> Html_Node.time] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  module Attributes = {
    [@bs.obj] external _make: (~datetime: string, unit) => Html_Attributes.t;

    let make = (~datetime, ()) =>
      _make(~datetime=Js.Date.toISOString(datetime), ());
  };

  let make =
      (
        ~aria=?,
        ~datetime,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "time",
      Util.merge_all([|
        Attributes.make(~datetime, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Title = {
  type t(+'a) = Html_Node.t([> Html_Node.title] as 'a);

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~style=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        child,
      )
      : t(_) =>
    Declaredom.make(
      "title",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      [|Declaredom.make_text(child)|],
    )
    |> Internal.make;
};

module Tr = {
  type t(+'a) = Html_Node.t([> Html_Node.tr] as 'a);

  type child =
    Html_Node.t(
      [
        Html_Node.th
        | Html_Node.td
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.table_row))=?,
        ~css_module: option(Css_Module.t(Css_Property.table_row))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "tr",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Track = {
  type t(+'a) = Html_Node.t([> Html_Node.track] as 'a);

  module Attributes = {
    [@bs.deriving jsConverter]
    type kind = [
      | `subtitles
      | `captions
      | `descriptions
      | `chapters
      | `metadata
    ];

    [@bs.obj]
    external _make:
      (
        ~kind: string=?,
        ~src: string=?,
        ~srclang: string=?,
        ~label: string=?,
        ~default: string=?,
        unit
      ) =>
      Html_Attributes.t;

    let make = (~kind=?, ~src=?, ~srclang=?, ~label=?, ~default=?, ()) =>
      _make(
        ~kind=?Belt.Option.map(kind, kindToJs),
        ~src?,
        ~srclang?,
        ~label?,
        ~default=?Belt.Option.map(default, Util.string_of_unit),
        (),
      );
  };

  let make =
      (
        ~aria: option(Html_Attributes.Aria.t(Html_Attributes.Aria.roletype))=?,
        ~kind=?,
        ~src,
        ~srclang=?,
        ~label=?,
        ~default=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "track",
      Util.merge_all([|
        Attributes.make(~kind?, ~src, ~srclang?, ~label?, ~default?, ()),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module U = {
  type t(+'a) = Html_Node.t([> Html_Node.u] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "u",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Ul = {
  type t(+'a) = Html_Node.t([> Html_Node.ul] as 'a);

  type child =
    Html_Node.t(
      [
        Html_Node.li
        | Html_Node.Element.script_supporting
        | Html_Node.fragment
      ],
    );

  let make =
      (
        ~aria:
           option(
             Html_Attributes.Aria.t(
               [<
                 Html_Attributes.Aria.list
                 | Html_Attributes.Aria.directory
                 | Html_Attributes.Aria.group
                 | Html_Attributes.Aria.listbox
                 | Html_Attributes.Aria.presentation
                 | Html_Attributes.Aria.menubar
                 | Html_Attributes.Aria.radiogroup
                 | Html_Attributes.Aria.tablist
                 | Html_Attributes.Aria.toolbar
                 | Html_Attributes.Aria.tree
               ],
             ),
           )=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.block))=?,
        ~css_module: option(Css_Module.t(Css_Property.block))=?,
        children: array(child),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "ul",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Var = {
  type t(+'a) = Html_Node.t([> Html_Node.var] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.phrasing('a) | Html_Node.other]);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "var",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Video = {
  type t(+'a) = Html_Node.t([> Html_Node.video] as 'a);

  type child(+'a) =
    Html_Node.t([ Html_Node.track | Html_Node.source | Html_Node.fragment]);

  module Attributes = {
    [@bs.obj]
    external _make:
      (
        ~src: string=?,
        ~crossorigin: string=?,
        ~poster: string=?,
        ~preload: string=?,
        ~autoplay: string=?,
        ~playsinline: string=?,
        ~loop: string=?,
        ~muted: string=?,
        ~controls: string=?,
        ~width: int=?,
        ~height: int=?,
        unit
      ) =>
      Html_Attributes.t;

    let make =
        (
          ~src=?,
          ~crossorigin=?,
          ~poster=?,
          ~preload=?,
          ~autoplay=?,
          ~playsinline=?,
          ~loop=?,
          ~muted=?,
          ~controls=?,
          ~width=?,
          ~height=?,
          (),
        ) =>
      _make(
        ~src?,
        ~crossorigin=?
          Belt.Option.map(crossorigin, Html_Attributes.CrossOrigin.show),
        ~poster?,
        ~preload=?Belt.Option.map(preload, Html_Attributes.Preload.show),
        ~autoplay=?Belt.Option.map(autoplay, Util.string_of_unit),
        ~playsinline=?Belt.Option.map(playsinline, Util.string_of_unit),
        ~loop=?Belt.Option.map(loop, Util.string_of_unit),
        ~muted=?Belt.Option.map(muted, Util.string_of_unit),
        ~controls=?Belt.Option.map(controls, Util.string_of_unit),
        ~width?,
        ~height?,
        (),
      );
  };

  let make =
      (
        ~aria:
           option(Html_Attributes.Aria.t(Html_Attributes.Aria.application))=?,
        ~src=?,
        ~crossorigin=?,
        ~poster=?,
        ~preload=?,
        ~autoplay=?,
        ~playsinline=?,
        ~loop=?,
        ~muted=?,
        ~controls=?,
        ~width=?,
        ~height=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        ~on_auxclick=?,
        ~on_blur=?,
        ~on_click=?,
        ~on_copy=?,
        ~on_cut=?,
        ~on_dblclick=?,
        ~on_drag=?,
        ~on_dragend=?,
        ~on_dragenter=?,
        ~on_dragexit=?,
        ~on_dragleave=?,
        ~on_dragover=?,
        ~on_dragstart=?,
        ~on_drop=?,
        ~on_focus=?,
        ~on_input=?,
        ~on_keydown=?,
        ~on_keypress=?,
        ~on_keyup=?,
        ~on_mousedown=?,
        ~on_mouseenter=?,
        ~on_mouseleave=?,
        ~on_mousemove=?,
        ~on_mouseout=?,
        ~on_mouseover=?,
        ~on_mouseup=?,
        ~on_wheel=?,
        ~on_paste=?,
        ~on_scroll=?,
        ~style: option(style(Css_Property.inline))=?,
        ~css_module: option(Css_Module.t(Css_Property.inline))=?,
        children: array(child(_)),
      )
      : t(_) => {
    let class_name = Css_Module.get_class(~class_name?, ~css_module?, ());

    Declaredom.make(
      "video",
      Util.merge_all([|
        Attributes.make(
          ~src?,
          ~crossorigin?,
          ~poster?,
          ~preload?,
          ~autoplay?,
          ~playsinline?,
          ~loop?,
          ~muted?,
          ~controls?,
          ~width?,
          ~height?,
          (),
        ),
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~style?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
        Html_Events.Global.make(
          ~on_auxclick?,
          ~on_blur?,
          ~on_click?,
          ~on_copy?,
          ~on_cut?,
          ~on_dblclick?,
          ~on_drag?,
          ~on_dragend?,
          ~on_dragenter?,
          ~on_dragexit?,
          ~on_dragleave?,
          ~on_dragover?,
          ~on_dragstart?,
          ~on_drop?,
          ~on_focus?,
          ~on_input?,
          ~on_keydown?,
          ~on_keypress?,
          ~on_keyup?,
          ~on_mousedown?,
          ~on_mouseenter?,
          ~on_mouseleave?,
          ~on_mousemove?,
          ~on_mouseout?,
          ~on_mouseover?,
          ~on_mouseup?,
          ~on_wheel?,
          ~on_paste?,
          ~on_scroll?,
          (),
        ),
      |]),
      children |> Js.Array.map(Html_Node.to_node),
    )
    |> Internal.make;
  };
};

module Wbr = {
  type t(+'a) = Html_Node.t([> Html_Node.wbr] as 'a);

  let make =
      (
        ~aria=?,
        ~accesskey=?,
        ~autocapitalize=?,
        ~class_name=?,
        ~class_set=?,
        ~contenteditable=?,
        ~dataset=?,
        ~dir=?,
        ~draggable=?,
        ~enterkeyhint=?,
        ~hidden=?,
        ~id=?,
        ~inputmode=?,
        ~is=?,
        ~itemid=?,
        ~itemprop=?,
        ~itemref=?,
        ~itemscope=?,
        ~itemtype=?,
        ~lang=?,
        ~nonce=?,
        ~slot=?,
        ~spellcheck=?,
        ~tabindex=?,
        ~title=?,
        ~translate=?,
        (),
      )
      : t(_) =>
    Declaredom.make_empty(
      "wbr",
      Util.merge_all([|
        Belt.Option.mapWithDefault(
          aria,
          Js.Dict.empty(),
          Html_Attributes.Aria.from_aria,
        ),
        Html_Attributes.Global.make(
          ~accesskey?,
          ~autocapitalize?,
          ~class_name?,
          ~class_set?,
          ~contenteditable?,
          ~dataset?,
          ~dir?,
          ~draggable?,
          ~enterkeyhint?,
          ~hidden?,
          ~id?,
          ~inputmode?,
          ~is?,
          ~itemid?,
          ~itemprop?,
          ~itemref?,
          ~itemscope?,
          ~itemtype?,
          ~lang?,
          ~nonce?,
          ~slot?,
          ~spellcheck?,
          ~tabindex?,
          ~title?,
          ~translate?,
          (),
        ),
      |]),
      (),
    )
    |> Internal.make;
};

module Text = {
  type t(+'a) = Html_Node.t([> Html_Node.text] as 'a);

  let make = (text: string): t(_) =>
    Internal.make @@ Declaredom.make_text(text);
};

module Fragment = {
  type t(+'a) = Html_Node.t([> Html_Node.fragment] as 'a);

  type child(+'a, +'b) =
    Html_Node.t(
      [< Html_Node.content('b) | Html_Node.other > `fragment] as 'a,
    );

  let make = (children: array(child('a, 'b))): child('a, 'b) =>
    children
    |> Js.Array.map(Html_Node.to_node)
    |> Declaredom.make_fragment
    |> Internal.make;
};
